.\" Manpage for Simple Shell.
.TH man 1 "Apr 01 2020" "1.0" "Simple Shell Man Page"
.SH NAME
simple_shell is an sh-compatible command language interpreter that executes commands from the stand input or from a file.
.SH SYNOPSIS
<command> <argument 1> <argument 2>

.SH DESCRIPTION
The simple shell is an interactive user interface with an operating system. It takes commands from the user and executes them.

.SS Overview
The simple_shell is a command that reads lines from the terminal, interprets them, and executes other commands.
For running the program execute gcc -Wall -Werror -Wextra -pedantic *.c -o hsh and run the executable file, like this: ./hsh. 
It has many features to interactive use and non-interactive use (shell scripts). Commands can be typed directly to the running shell or can be exceuted from a file

.SS Simple Commands
    If a simple command has been recognized, the shell performs the following actions:

    1.   Leading words of the form “name=value” are stripped off and assigned to the environment of the simple command.
    2.   The remaining words are expanded and the first remaining word is considered the command name and the command is located. The remaining words are 
         considered the arguments of the command.  If no command name resulted, then the “name=value” variable assignments recognized in item 1 affect the 
         current shell.

.SS Search and Execution
     The commands will be search in this order: shell functions, builtin commands, and normal programs.
     
     Shell builtins are executed internally to the shell, without spawning a new process. If the command name doesn't match a function or builtin, 
     the command is searched for as a normal program in the file system. When a normal program is executed, the shell runs the program, passing the arguments 
     and the environment to the program. If the program is not a normal executable file the shell will interpret the program in a subshell. 
     The child shell will reinitialize itself in this case, so that the effect will be as if a new shell had been invoked to handle the ad-hoc shell script, 
     except that the location of hashed commands located in the parent shell will be remembered by the child.

   .SS Path Search
     When locating a command, the shell first looks to see if it has a shell function by that name.  Then it looks for a builtin command by that name.  
     If a builtin command is not found, one of two things happen:

     1.  Command names containing a slash are simply executed without performing any searches.

     2.  The shell searches each entry in PATH in turn for the command.  The value of the PATH variable should be a series of entries separated by colons. 
      Each entry consists of a directory name.  The current directory may be indicated implicitly by an empty directory name, or explicitly by a single period.

 .SS Command Exit Status
     Each command has an exit status that can influence the behaviour of other shell commands.  The paradigm is that a command exits with zero for normal or 
     success, and nonzero for failure, error, or a false indication.  The man page for each command should indicate the various exit codes and what they mean. 
     Additionally, the builtin commands return exit codes, as does an executed shell function.

     If a command consists entirely of variable assignments then the exit status of the command is that of the last command substitution if any, otherwise 0.

.SS Variables and Parameters
     The shell maintains a set of parameters.  A parameter denoted by a name is called a variable.  When starting up, the shell turns all the environment variables into shell
     variables.  New variables can be set using the form

           name=value

     Variables set by the user must have a name consisting solely of alphabetics, numerics, and underscores - the first of which must not be numeric.  A parameter can also be
     denoted by a number or a special character as explained below.


.SS Builtins
This section lists the builtin commands which are builtin because they need to perform some operation that can't be performed by a separate process.


.B cd [-LP] [directory]

.B env  [-] [NAME=VALUE]... [COMMAND [ARG]...]
Prints out the current environment.

.B exit [exitstatus]
Terminate the shell process.  If exitstatus is given it is used as the exit status of the shell; otherwise the exit status of the preceding command is used.

.B setenv [VARIABLE] [VALUE]
The setenv() built-in adds the variable name to the environment with the value "VALUE", if name does not already exist. If name does exist in the environment, then its value is changed to value if overwrite is nonzero; if overwrite is zero, then the value of name is not changed. 

.B unsetenv [VARIABLE]
The unsetenv() built-in deletes the variable name from the environment. If name does not exist in the environment, then the function succeeds, and the environment is unchanged.


.SH EXIT STATUS
     Errors that are detected by the shell, such as a syntax error, will cause the shell to exit with a non-zero exit status.  If the shell is not an interactive shell, the
     execution of the shell file will be aborted.  Otherwise the shell will return the exit status of the last command executed, or if the exit builtin is used with a numeric
     argument, it will return the argument.

.SH ENVIRONMENT
    .SS  HOME       Set automatically by login(1) from the user's login directory in the password file (passwd(4)).  This environment variable also functions as the default argu‐
                ment for the cd builtin.
    .SS PATH       The default search path for executables.  See the above section Path Search.
    .SS PWD        The logical value of the current working directory.  This is set by the cd command.
    .SS OLDPWD     The previous logical value of the current working directory.  This is set by the cd command.

.SH BUGS
No known bugs.

.SH AUTHORS
Sebastian Escobar -1575@holbertonschool.com- and Valeria Alvarez - 1553@holbertonschool.com